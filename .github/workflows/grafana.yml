name: Zabbix server + Grafana
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Akcja do wykonania'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      vm_number:
        description: 'Numer maszyny (1, 1-5, 1,3,5, ALL)'
        required: true
        default: 'ALL'
jobs:
  terraform:
    name: Zarządzanie VM Zabbix server + Grafana
    runs-on: self-hosted
    defaults:
      run:
        working-directory: Grafana
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Restore Terraform state from Git backup
        run: |
          if [ ! -f terraform.tfstate ] && [ -f .terraform-state-backup ]; then
            echo "\033[1;36mPrzywracanie stanu Terraform z backup w Git...\033[0m"
            cp .terraform-state-backup terraform.tfstate
            echo "Stan przywrócony z backup!"
          else
            echo "Brak backupu w Git lub stan już istnieje"
          fi

      - name: Instalacja Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform init
        run: |
          echo "Czyszczę lokalny cache Terraform (moduły / plan)";
          rm -rf .terraform .terraform.lock.hcl || true
          terraform init

      - name: Terraform Apply/Destroy (na wzór Jenkins)
        run: |
          set -e
          
          # Funkcja do parsowania zakresów (1-5, 1,3,5, etc.)
          parse_vm_numbers() {
            local input="$1"
            if [ "$input" = "ALL" ]; then
              echo "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"
            elif [[ "$input" =~ ^[0-9]+-[0-9]+$ ]]; then
              # Zakres typu 1-5
              local start=$(echo "$input" | cut -d'-' -f1)
              local end=$(echo "$input" | cut -d'-' -f2)
              seq $start $end | tr '\n' ' '
            elif [[ "$input" =~ ^[0-9,]+$ ]]; then
              # Lista typu 1,3,5
              echo "$input" | tr ',' ' '
            else
              # Pojedynczy numer
              echo "$input"
            fi
          }
          
          vm_list=$(parse_vm_numbers "${{ github.event.inputs.vm_number }}")
          echo "🎯 Przetwarzanie VM: $vm_list"
          
          for vm_num in $vm_list; do
            echo "🚀 Przetwarzanie VM #$vm_num"
            if [ "${{ github.event.inputs.action }}" = "apply" ]; then
              terraform apply -auto-approve -target=module.vm[\"$vm_num\"] -var="zakres=$vm_num"
            else
              terraform destroy -auto-approve -target=module.vm[\"$vm_num\"] -var="zakres=$vm_num"
            fi
            
            # Opóźnienie między VM (ale nie po ostatniej)
            if [ "$vm_num" != "$(echo $vm_list | awk '{print $NF}')" ]; then
              echo "⏳ Opóźnienie 15 sekund między maszynami"
              sleep 15
            fi
          done

      - name: Sprawdź czy plik stanu powstał
        run: |
          echo "=== DIAGNOSTYKA PLIKU STANU ==="
          pwd
          ls -la
          if [ -f terraform.tfstate ]; then
            echo "✅ Plik terraform.tfstate istnieje - rozmiar: $(ls -lh terraform.tfstate | awk '{print $5}')"
            echo "📁 Pełna ścieżka: $(realpath terraform.tfstate)"
            echo "🔐 Uprawnienia: $(ls -l terraform.tfstate)"
            echo "📄 Pierwsze 3 linie pliku:"
            head -3 terraform.tfstate || echo "Nie można odczytać pliku"
          else
            echo "❌ Plik terraform.tfstate NIE istnieje!"
            echo "📁 Pliki w katalogu:"
            ls -la | grep terraform || echo "Brak plików terraform w katalogu"
          fi
          echo "================================"

      - name: Upload Terraform state (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: Grafana/terraform.tfstate
          retention-days: 30
        if: success() || failure()

      - name: Backup Terraform state to Git (Zabbix server + Grafana)
        run: |
          if [ -f terraform.tfstate ] && [ -n "${{ secrets.GH_PAT }}" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            cp terraform.tfstate .terraform-state-backup
            git add .terraform-state-backup
            if git diff --staged --quiet; then
              echo "Stan Terraform nie zmienił się - pomijam commit"
            else
              git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/Sebastian-Koziatek/Terraform-Proxmox.git
              git commit -m "Backup terraform state po ${GITHUB_JOB} (VM: ${{ github.event.inputs.vm_number }})"
              git push
            fi
          else
            echo "Brak pliku terraform.tfstate lub tokena GH_PAT, backup pominięty."
          fi
